# matrix-free Jacobian action, preconditioner constructed using PetscPreconditionerFactory

-snes_view
-snes_monitor
-snes_converged_reason

#-snes_linesearch_type bt

-snes_mf_operator
-snes_type newtontr
#-snes_type newtonls
#-snes_type nrichardson


#-snes_ksp_ew_conv  # a flag for inexact newton

#-snes_rtol 1e-20
###################################################

#-ksp_monitor
#-ksp_view

-ksp_type fgmres
-ksp_gmres_restart 75 # longer restrat better convergence and slower speed
#-ksp_gmres_restart 50
#-ksp_gmres_restart 30
-ksp_gmres_modifiedgramschmidt # more stable but a bit slower

#-ksp_gmres_cgs_refinement_type refine_ifneeded # help the solver to convrege, but also make it a bit slower
#-ksp_gmres_cgs_refinement_type refine_always # help the solver to convrege, but also make it a bit slower
#<refine_never,refine_ifneeded,refine_always>

# convergent 
## KSPSetType(pn_ksp,KSPPIPEFGMRES); /* fast */
## KSPSetType(pn_ksp,KSPDGMRES);
## KSPSetType(pn_ksp,KSPLGMRES); 
## KSPSetType(pn_ksp,KSPGMRES);
## KSPSetType(pn_ksp,KSPPGMRES); /* slow */

# not convergent
## KSPSetType(pn_ksp,KSPTFQMR);
## KSPSetType(pn_ksp,KSPTCQMR);
## KSPSetType(pn_ksp,KSPCGS);
## KSPSetType(pn_ksp,KSPBCGS);
## KSPSetType(pn_ksp,KSPCG);

##################################
#-ksp_rtol 1e-20

-s0_ksp_max_it 10
#-s0_pc_type gamg
-s0_pc_type hypre # slightly better
#-s0_pc_type mg

#-s0_ksp_rtol 1e-3
#-s0_ksp_atol 1e-6

#-s0_ksp_type minres
#-s0_ksp_type gmres
-s0_ksp_type cg
#-s0_ksp_type preonly

#-s0_ksp_view
#-s0_ksp_converged_reason
#-s0_ksp_monitor_true_residual


########################

########################
-s1_ksp_max_it 10

-s1_pc_type hypre #better
#-s1_pc_type mg

-s1_ksp_rtol 1e-3
#-s1_ksp_atol 1e-6

#-s1_ksp_type minres
#-s1_ksp_type gmres
-s1_ksp_type cg
#-s1_ksp_type preonly

#-s1_ksp_view
#-s1_ksp_converged_reason
#-s1_ksp_monitor
########################


########################
#-s2_ksp_view
-s2_ksp_rtol 1e-3
#-s2_ksp_atol 1e-6

#-s2_ksp_max_it 15


#-s2_pc_type sor # perform better for sol_opt 0
			    # in parallel this is block jacobian with sor on each block
#-s2_pc_sor_symmetric
#-s2_pc_type eisenstat # good 2
#-s2_pc_type jacobi # good 2
#-s2_pc_type bjacobi # not cool
#-s2_pc_type asm # diverge


#-s2_pc_type gamg # perform good for sol_opt 1 and sol_opt 2, but not converge on very refined mesh

#-s2_pc_gamg_square_graph 2

#-s2_pc_gamg_reuse_interpolation
#-s2_pc_mg_levels 2
#-s2_pc_mg_cycles w

#-s2_pc_gamg_type classical
#-s2_pc_gamg_type agg
#-s2_pc_gamg_agg_nsmooths 1
#-s2_pc_gamg_agg_nsmooths 1


#-s2_pc_type mg # good 1
#-s2_pc_mg_galerkin
#-s2_pc_mg_cycles w # bad with sol_opt 1 -o 1 -r 5



-s2_pc_type hypre #good 2
-s2_pc_hypre_type boomeramg

-s2_pc_hypre_boomeramg_truncfactor 0.5 # larger for speed, smaller for accuracy
-s2_pc_hypre_boomeramg_P_max 2 # make things faster
-s2_pc_hypre_boomeramg_interp_type ext+i
#-s2_pc_hypre_boomeramg_coarsen_type HMIS # HMIS # PMIS # Falgout default one

#-s2_pc_hypre_boomeramg_agg_nl 0 # larger for speed, smaller for convergence
#-s2_pc_hypre_boomeramg_agg_num_paths 3 # larger for convergence, smaller for one step solve
#-s2_pc_hypre_boomeramg_agg_nl 1 # slow convergence, fast one step solve, over all not good for refined mesh but good for coarse mesh
#-s2_pc_hypre_boomeramg_stong_threshold 0.7

#-s2_pc_hypre_type ams # not easy to use
#-s2_pc_hypre_type ads # not easy to use

#-s2_pc_type asm # additive Schwartz, bad

-s2_ksp_type fcg
#-s2_ksp_type cg
#-s2_ksp_type gmres
#-s2_ksp_type minres
#-s2_ksp_type preonly


#-s2_ksp_converged_reason
#-s2_ksp_view
#-s2_ksp_monitor
########################


########################
#-s3_ksp_max_it 10
-s3_pc_type hypre # better 
#-s3_pc_type mg # much worse

-s3_ksp_rtol 1e-3
#-s3_ksp_atol 1e-6

#-s3_ksp_type minres
#-s3_ksp_type gmres
-s3_ksp_type cg
-s3_ksp_type preonly

#-s3_ksp_view
#-s3_ksp_converged_reason
#-s3_ksp_monitor
########################
