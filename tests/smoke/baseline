#!/bin/sh

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.googlecode.com.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.


# Set the test and run directories
run_dir="$PWD"
test_dir=$( cd "$( dirname "$0" )" && pwd )
num_proc=13
build_np=${MFEM_TEST_NP:-4}

# Echo usage information
case $1 in
   -h|-help)
      cat <<EOF

   $0 [-h|-help] {mfem_dir} {tpls_dir}

   where: {mfem_dir}  is the MFEM source directory [default value: ../mfem]
          {tpls_dir}  is the TPLs directory [default value: ../tpls]
          -h|-help    prints this usage information and exits

   This script runs the MFEM examples with their default options and compares
   the results with a saved baseline file for the current machine.

   Optional environment variables used by this script:
     MFEM_TEST_NP - number of processors to use for building, default: 4

   Example usage: $0 ../.. ../../../tpls

EOF
      exit
      ;;
esac

# Determine current machine based on $SYS_TYPE or hostname
if [ $SYS_TYPE ]; then
   host="$SYS_TYPE"
   mpiexec="srun"
   mpiexec_numproc_flag="-n"
else
   host=`hostname -s`
   mpiexec="mpirun"
   mpiexec_numproc_flag="-np"
fi

# Remove files generated by previous runs of this script
rm -f "$run_dir"/baseline-$host.{out,patch,diff}

# Setup
mfem_dir="$1"
if [ "$mfem_dir" = "" ]; then
    mfem_dir="../.."
fi
if ! [ -d "$mfem_dir" ]; then
   printf "\nMFEM directory not found: $mfem_dir\n\n" 1>&2
   exit 1
fi
cd "$mfem_dir" || exit 1
mfem_dir="$PWD"

tpls_dir="$2"
if [ "$tpls_dir" = "" ]; then
    tpls_dir="../../../tpls"
fi
if ! [ -d "$tpls_dir" ]; then
   printf "\nTPLs directory not found: $tpls_dir\n\n" 1>&2
   exit 1
fi
cd "$tpls_dir" || exit 1
tpls_dir="$PWD"

# Make sure serial examples and miniapps are built
echo "-----------------------------------------"
echo " Compiling MFEM serial..."
echo "-----------------------------------------"
if [ $SYS_TYPE ]; then
   cd $tpls_dir
   make clean-all MFEM_DIR="$mfem_dir" && \
   make mfem MFEM_USE_MPI=NO MFEM_DEBUG=NO MFEM_DIR="$mfem_dir" \
      -j $build_np && \
   cd $mfem_dir && \
   make all -j $build_np
else
   cd $mfem_dir && \
   make distclean && make serial -j $build_np && \
   make all -j $build_np
fi || {
   printf "\nMFEM serial build failed.\n\n" 1>&2
   exit 1
}

# Make sure "." is the first directory in the path
export PATH=.:"$PATH"

# Default serial example runs
printf "Running the serial MFEM examples ...\n"
cd "$mfem_dir"/examples
( printf "\nTesting: Example 1\n\n"
  ex1  -no-vis
  printf "\nTesting: Example 2\n\n"
  ex2  -no-vis
  printf "\nTesting: Example 3\n\n"
  ex3  -no-vis
  printf "\nTesting: Example 4\n\n"
  ex4  -no-vis
  printf "\nTesting: Example 5\n\n"
  ex5  -no-vis
  printf "\nTesting: Example 6\n\n"
  ex6  -no-vis
  printf "\nTesting: Example 7\n\n"
  ex7  -no-vis
  printf "\nTesting: Example 8\n\n"
  ex8  -no-vis
  printf "\nTesting: Example 9\n\n"
  ex9  -no-vis
  printf "\nTesting: Example 10\n\n"
  ex10 -no-vis
  printf "\nTesting: Example 14\n\n"
  ex14 -no-vis
  printf "\nTesting: Example 15\n\n"
  ex15 -no-vis
  printf "\nTesting: Example 16\n\n"
  ex16 -no-vis
  printf "\nTesting: Example 17\n\n"
  ex17 -no-vis
  printf "\nTesting: Example 18\n\n"
  ex18 -no-vis ) \
  > "$run_dir"/baseline-$host.out 2>&1

# Serial HPC examples runs
cd "$mfem_dir"/miniapps/performance
( printf "\nTesting: HPC Example 1 (a) -perf -mf -pc lor\n\n"
  ex1 -no-vis -perf -mf -pc lor
  printf "\nTesting: HPC Example 1 (b) -perf -asm -pc ho\n\n"
  ex1 -no-vis -perf -asm -pc ho
  printf "\nTesting: HPC Example 1 (c) -std -asm -pc ho\n\n"
  ex1 -no-vis -std -asm -pc ho) \
  >> "$run_dir"/baseline-$host.out 2>&1

# Serial NURBS examples runs
cd "$mfem_dir"/miniapps/nurbs
( printf "\nTesting: NURBS Example 1\n\n"
  ex1  -no-vis) \
  >> "$run_dir"/baseline-$host.out 2>&1

# Make sure parallel examples and miniapps are built
echo "-----------------------------------------"
echo " Compiling MFEM parallel..."
echo "-----------------------------------------"
if [ $SYS_TYPE ]; then
   cd $tpls_dir
   make clean-all MFEM_DIR="$mfem_dir" && \
   make mfem MFEM_USE_MPI=YES MFEM_DEBUG=NO MFEM_DIR="$mfem_dir" \
      -j $build_np && \
   cd $mfem_dir && \
   make all -j $build_np
else
   cd $mfem_dir && \
   make distclean && make parallel -j $build_np && \
   make all -j $build_np
fi || {
   printf "\nMFEM parallel build failed.\n\n" 1>&2
   exit 1
}

# Default parallel example runs
printf "Running the parallel MFEM examples on $num_proc processors ...\n"
mpi_run="$mpiexec $mpiexec_numproc_flag $num_proc"
cd "$mfem_dir"/examples
( printf "\nTesting: Example 1p\n\n"
  $mpi_run ex1p  -no-vis
  printf "\nTesting: Example 2p\n\n"
  $mpi_run ex2p  -no-vis
  printf "\nTesting: Example 2p -elast\n\n"
  $mpi_run ex2p  -no-vis -elast
  printf "\nTesting: Example 3p\n\n"
  $mpi_run ex3p  -no-vis
  printf "\nTesting: Example 4p\n\n"
  $mpi_run ex4p  -no-vis
  printf "\nTesting: Example 4p -hb\n\n"
  $mpi_run ex4p  -no-vis -hb
  printf "\nTesting: Example 5p\n\n"
  $mpi_run ex5p  -no-vis
  printf "\nTesting: Example 6p\n\n"
  $mpi_run ex6p  -no-vis
  printf "\nTesting: Example 7p\n\n"
  $mpi_run ex7p  -no-vis
  printf "\nTesting: Example 8p\n\n"
  $mpi_run ex8p  -no-vis
  printf "\nTesting: Example 9p\n\n"
  $mpi_run ex9p  -no-vis
  printf "\nTesting: Example 10p\n\n"
  $mpi_run ex10p -no-vis
  printf "\nTesting: Example 11p\n\n"
  $mpi_run ex11p -no-vis
  printf "\nTesting: Example 12p\n\n"
  $mpi_run ex12p -no-vis
  printf "\nTesting: Example 13p\n\n"
  $mpi_run ex13p -no-vis
  printf "\nTesting: Example 14p\n\n"
  $mpi_run ex14p -no-vis
  printf "\nTesting: Example 15p\n\n"
  $mpi_run ex15p -no-vis
  printf "\nTesting: Example 16p\n\n"
  $mpi_run ex16p -no-vis
  printf "\nTesting: Example 17p\n\n"
  $mpi_run ex17p -no-vis
  printf "\nTesting: Example 18p\n\n"
  $mpi_run ex18p -rs 1 -no-vis ) \
  >> "$run_dir"/baseline-$host.out 2>&1

# Parallel electromagnetic miniapps runs
cd "$mfem_dir"/miniapps/electromagnetics
( printf "\nTesting: Tesla miniapp\n\n"
  $mpi_run tesla -no-vis -maxit 2 -cr '0 0 -0.2 0 0 0.2 0.2 0.4 1'
  printf "\nTesting: Volta miniapp\n\n"
  $mpi_run volta -no-vis -maxit 2 -dbcs 1 -dbcg -ds '0.0 0.0 0.0 0.2 8.0'
  printf "\nTesting: Maxwell miniapp\n\n"
  $mpi_run maxwell -no-vis -abcs '-1' -dp '-0.3 0.0 0.0 0.3 0.0 0.0 0.1 1 .5 .5' -rs 2
  printf "\nTesting: Joule miniapp\n\n"
  $mpi_run joule -no-vis -p rod -tf 3 ) \
  >> "$run_dir"/baseline-$host.out 2>&1

# Parallel HPC examples runs
cd "$mfem_dir"/miniapps/performance
( printf "\nTesting: HPC Example 1p (a) -perf -mf -pc lor\n\n"
  $mpi_run ex1p -no-vis -perf -mf -pc lor
  printf "\nTesting: HPC Example 1p (b) -perf -asm -pc ho\n\n"
  $mpi_run ex1p -no-vis -perf -asm -pc ho
  printf "\nTesting: HPC Example 1p (c) -std -asm -pc ho\n\n"
  $mpi_run ex1p -no-vis -std -asm -pc ho) \
  >> "$run_dir"/baseline-$host.out 2>&1

# Parallel NURBS examples runs
cd "$mfem_dir"/miniapps/nurbs
( printf "\nTesting: NURBS Example 1p\n\n"
  $mpi_run ex1p  -no-vis
  printf "\nTesting: NURBS Example 11p\n\n"
  $mpi_run ex11p  -no-vis) \
  >> "$run_dir"/baseline-$host.out 2>&1

cd "$run_dir"

# Compare with saved baseline file
if ! [ -f "$test_dir"/baseline-$host.saved ]; then
   printf "\nSaved baseline file not found: %s\n\n" \
      "$test_dir/baseline-$host.saved" 1>&2
   exit 1
fi

sed -e 's/\(= \).*\( seconds\)/\1x.xx\2/' \
    -e 's/took .*s/took x.xxs/' \
    -e 's/done, .*s/done, x.xxs/' \
    -e 's/Time per CG step: .*s/Time per CG step: x.xxs/' \
    baseline-$host.out > baseline-$host.out.filt

sed -e 's/\(= \).*\( seconds\)/\1x.xx\2/' \
    -e 's/took .*s/took x.xxs/' \
    -e 's/done, .*s/done, x.xxs/' \
    -e 's/Time per CG step: .*s/Time per CG step: x.xxs/' \
    "$test_dir"/baseline-$host.saved > baseline-$host.saved.filt

diff -b -u --show-function-line="Testing:" \
   baseline-$host.saved.filt baseline-$host.out.filt > baseline-$host.diff

rm -f baseline-$host.saved.filt baseline-$host.out.filt

# Create "baseline-$host.patch" file for "baseline-$host.out" relative
# to "$test_dir/baseline-$host.saved":
diff "$test_dir/baseline-$host.saved" "baseline-$host.out" \
   > "baseline-$host.patch"
# Rename the .out file to .out.orig:
mv "baseline-$host.out" "baseline-$host.out.orig"
# Recover the .out file from the .saved and .patch files:
cp -p "$test_dir/baseline-$host.saved" "baseline-$host.out"
patch "baseline-$host.out" < "baseline-$host.patch"
# Check that the .patch file recovers the .out file exactly:
if diff -q "baseline-$host.out.orig" "baseline-$host.out"; then
   # Keep the smaller of the files: .out.orig or .patch
   set -- `wc -c "baseline-$host.patch"`
   psize="$1"
   set -- `wc -c "baseline-$host.out.orig"`
   osize="$1"
   if [ "$psize" -lt "$osize" ]; then
      # Keep the .patch file
      rm -f "baseline-$host".{out.orig,out}
   else
      # Keep the .out.orig file
      rm -f "baseline-$host".{out,patch}
      mv -f "baseline-$host.out.orig" "baseline-$host.out"
   fi
else
   echo "Invalid .patch file, keeping the .out file!"
   mv -f "baseline-$host.out.orig" "baseline-$host.out"
   rm -f "baseline-$host.patch"
fi

if [ -s baseline-$host.diff ]; then
   printf "\nTest FAILED: there are differences with the saved baseline.\n"
   printf "For details, see the file: baseline-$host.diff\n\n"
else
   printf "\nTest PASSED: no differences with the saved baseline.\n\n"
   rm -f baseline-$host.diff
fi
