#!/bin/sh

# Copyright (c) 2010, Lawrence Livermore National Security, LLC. Produced at the
# Lawrence Livermore National Laboratory. LLNL-CODE-443211. All Rights reserved.
# See file COPYRIGHT for details.
#
# This file is part of the MFEM library. For more information and source code
# availability see http://mfem.googlecode.com.
#
# MFEM is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License (as published by the Free
# Software Foundation) version 2.1 dated February 1999.

script="$( basename "$0" )"
run_dir="$PWD"
test_dir=$( cd "$( dirname "$0" )" && pwd )
build_np=${MFEM_TEST_NP:-4}
# Note: the parallel sample runs specify their own number of processors.

# Echo usage information
case $1 in
   -h|-help)
      cat <<EOF

   $0 [-h|-help] {mfem_dir}

   where: {mfem_dir}  is the MFEM source directory [default value: ../mfem]
          -h|-help    prints this usage information and exits

   This script runs the MFEM sample runs and compares the results with a saved
   baseline file for the current configuration/host.

   Optional environment variables used by this script:
     MFEM_TEST_NP     - number of processors to use for building, default: 4
     MFEM_TEST_CONFIG - configuration name, default: "\$host"

   Example usage: $0 ../..

EOF
      exit
      ;;
esac

# Determine current machine based on $SYS_TYPE or hostname
if [ $SYS_TYPE ]; then
   host="$SYS_TYPE"
else
   host=`hostname -s`
fi

# Determine current configuration: $MFEM_TEST_CONFIG or $host:
config=${MFEM_TEST_CONFIG:-$host}

# Remove files generated by previous runs of this script
rm -f "$run_dir/$script-$config".{out,patch,diff}

# Setup
mfem_dir="$1"
if [ "$mfem_dir" = "" ]; then
    mfem_dir="../.."
fi
shift
if ! [ -d "$mfem_dir" ]; then
   printf "\nDirectory not found: $mfem_dir\n\n" 1>&2
   exit 1
fi
cd "$mfem_dir" || exit 1
mfem_dir="$PWD"

# Build and run all serial sample runs:
printf "Building and running the serial MFEM sample runs ...\n"
"$test_dir"/sample-runs "$mfem_dir" -j $build_np -t \
   > "$run_dir/$script-$config.out" 2>&1

printf "\n\n" >> "$run_dir/$script-$config.out"

# Build and run all parallel sample runs:
printf "Building and running the parallel MFEM sample runs ...\n"
"$test_dir"/sample-runs "$mfem_dir" -p -j $build_np -t \
   >> "$run_dir/$script-$config.out" 2>&1

cd "$run_dir"

# Compare with saved baseline file
if ! [ -f "$test_dir/$script-$config.saved" ]; then
   printf "\nSaved baseline file not found: %s\n\n" \
      "$test_dir/$script-$config.saved" 1>&2
   exit 1
fi

filt=(-e 's/^.*%cpu.*$//g'
      -e 's/](.*s)/]/g'
      -e 's/\(= \).*\( seconds\)/\1x.xx\2/'
      -e 's/took .*s/took x.xxs/'
      -e 's/done, .*s/done, x.xxs/'
      -e 's/Time per CG step: .*s/Time per CG step: x.xxs/'
      -e 's/\(MFEM_VERSION         =\).*/\1/'
      -e 's/\(MFEM_GIT_STRING      =\).*/\1/')

sed "${filt[@]}" "$script-$config.out" > $script-$config.out.filt
sed "${filt[@]}" "$test_dir/$script-$config.saved" > $script-$config.saved.filt

diff -b -u --show-function-line="^<.*> .*" \
   $script-$config.saved.filt $script-$config.out.filt \
   > $script-$config.diff

rm -f $script-$config.saved.filt $script-$config.out.filt

# Create "$script-$config.patch" file for "$script-$config.out" relative
# to "$test_dir/$script-$config.saved":
diff "$test_dir/$script-$config.saved" "$script-$config.out" \
   > "$script-$config.patch"
# Rename the .out file to .out.orig:
mv "$script-$config.out" "$script-$config.out.orig"
# Recover the .out file from the .saved and .patch files:
cp -p "$test_dir/$script-$config.saved" "$script-$config.out"
patch "$script-$config.out" < "$script-$config.patch"
# Check that the .patch file recovers the .out file exactly:
if diff -q "$script-$config.out.orig" "$script-$config.out"; then
   # Keep the smaller of the files: .out.orig or .patch
   set -- `wc -c "$script-$config.patch"`
   psize="$1"
   set -- `wc -c "$script-$config.out.orig"`
   osize="$1"
   if [ "$psize" -lt "$osize" ]; then
      # Keep the .patch file
      rm -f "$script-$config".{out.orig,out}
   else
      # Keep the .out.orig file
      rm -f "$script-$config".{out,patch}
      mv -f "$script-$config.out.orig" "$script-$config.out"
   fi
else
   echo "Invalid .patch file, keeping the .out file!"
   mv -f "$script-$config.out.orig" "$script-$config.out"
   rm -f "$script-$config.patch"
fi

if [ -s $script-$config.diff ]; then
   printf "\nTest FAILED: there are differences with the saved baseline.\n"
   printf "For details, see the file: $script-$config.diff\n\n"
else
   printf "\nTest PASSED: no differences with the saved baseline.\n\n"
   rm -f $script-$config.diff
fi
